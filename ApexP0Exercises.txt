////////////
//Created on: 1/30/19
//Author: Oscar
//Description: Various problems for project 0
////////////////////////////////

public class ApexP0Exercises {
    
    /*
     * 1. Return the nth Fibonacci number
     * Test Cases:
     * Input: 0 	Output: 0
     * Input: 1	Output: 1
     * Input: 2 	Output: 1
     * Input: 10	Output: 55
    */
    ///////////////////////////////////////////
    // Take input and returns values based on n
    // 1 and 0 will return as is, otherwise the for loop will be used
    // during the loop two integers will be used, a high and low.
    // depends on the number the high value will be saved and store all the values
    //////////////////////////////////////////////
    public static Integer nFibonacci( Integer n ){
        if(n==1){
        	system.debug(n);
            return n;
        }
        else if(n==0){
        	system.debug(n);
            return n;
        }
        Integer high = 1,low = 0;
        for(Integer i=2; i<=n;i++){
            Integer tmp = high;
            high= low+high;
            low = tmp;
        }
        return high;
	}
    
    /*
     * 2. Sort an array of integers.
     * Test Cases:
     * Input: [2,4,5,1,3,1] 	Output: [1,1,2,3,4,5]
     * Input: [5,4,3,2,1] 	Output: [1,2,3,4,5]
     *
     * Don't use the sort() method... that would be lame.
     * Bubble Sort
	*/
    
    //Bubble sort, tolds first element of the array in temp
    //goes through all of array, if there is an element less than the first
    //element then swap places. Continues going through array until array ends
    //continues onto next position and repeat
    public static Integer[] sortArray( Integer[] intList ) {
        for(Integer i=0;i<intList.size()-1;i++){
            for(Integer j=0;j<intList.size()-i-1;j++){
                if(intList[j]>intList[j+1]){
                    Integer temp=intList[j];
                    intList[j]=intList[j+1];
                    intList[j+1]=temp;                	
                }	
            }
        }
        return intList;
    }
    /*
     * 3. Return the factorial of n.
     * Test Cases:
     * Input: 0	Output: 1
     * Input: 1	Output: 1
     * Input: 3	Output: 6
    */
    //Go through all of n while adding each n to sum and subtracting by i for each loop
    public static Integer nFactorial( Integer n) {
        Integer sum = 0;
        for(Integer i=0;i<=n;i++){
            sum += i;
        }
        return sum;
    }
    
    /*
     * 4. Rotate left
     * Given an array, array, and an integer, n, rotate the values in array left n times and return array
     * Test Cases:
     * Input: [1,2,3,4,5], 1	Output: [2,3,4,5,1]
     * Input: [1,2,3,4,5], 6	Output: [2,3,4,5,1]
     * Input: [1,2,3,4,5], 3	Output: [4,5,1,2,3]
    */
    //////////////////////////////////////
    // Takes the first element of the array and stores it in temp
    // rotates through the array while shifting all elements one to the left
    // then place the temp element into the last element
    ////////////////////////////////////////
    public static Integer[] rotateLeftNTimes( Integer[] arr, Integer n) {
        Integer temp = null;
        for(Integer i=0;i<n;i++){//Keeps track of how many left shifts we need
            temp=arr[0];
            for(Integer j=1;j<arr.size();j++){//tracks the array elements to be shifted
            arr[j-1]=arr[j];
            }
            arr[arr.size()-1]=temp;
        }
        return arr;
    }
        
    /*
     * 5. Balanced Brackets
     * A bracket is any one of the following: (, ), {, }, [, or ]
     * 
     * The following are balanced brackets:
     *    ( )
     *    ( ) ( )
     *    ( ( ) )
     *    ( { [ ] } )
     *
     * The following are NOT balanced brackets:
     *   (
     *   )
     *   ( ( )
     *   ( [ ) ]
     *
     * Return true if balanced
     * Return false if not balanced
    */
    /////////////////////////////////////////////////////////
    //Input a string of parentheses, brackets, and curly braces.
    //change the string into a List of Integers.
    //The string will then turn into integer version of the chars
    //The method will return true if all inputs are balanced and return
    //false if there are unbalanced brackets
    public static Boolean bracketsAreBalanced( String s ) {
        List<Integer> input = new List<Integer>(s.getChars());
        Integer j=1;//Used to keep track of current List position
        while(!input.isEmpty()){
            if(input.size()==1){//If list has one element remaining then it is not balanced
                return false;
            }else if(input[0]==32){//If input position carries a space, then remove the space
                input.remove(0);
            }else if(input[j]==32){
                input.remove(j);
            }else if(input[0]+1==input[j]){//If both first position and position J finds a pair of parentheses, then remove both
                							// and reset j to 1.
                input.remove(j);
                input.remove(0);
                j=1;
            }else if(input[0]+2==input[j]){
            	input.remove(j);
                input.remove(0);
                j=1;
            }else{
                j++;
            }
        }
        return true;
    }
    /*
     * 6. Create a method that retrieves a list of all accounts and updates those accounts.
     * 	 Create a custom field on the Account standard object called Size__c that will be a 
     * picklist containing small/medium/large.
     * 	Create a method that retrieves a list of all accounts. 
     * 		- If an account has between 1-1000 employees then it is classified as small.
     * 		- If an account has between 1001-10000 employees it is classified as medium.
     * 		- If an account has more than 10000 employees it is classified as large.
     * 	Update the Size__c field on each account to reflect the amount of employees in the Account.
    */
    /////////////////////////////////////////////////
    //Goes through all accounts and checks for numberOfEmployees
    //for each number of employees given checks if it's within a range of values
    //Give the size__c a value of Large, Medium, or small depending on the values passed
    //by NumberOfEmployees
    ///////////////////////////////////////////////////
    public static void updateAccountSize(){
        LIST<Account> account = new LIST<Account>();
        for(Account a: [SELECT Name, NumberOfEmployees, Size__c FROM Account]){
            if(a.NumberOfEmployees>10000){
                a.Size__c='Large';
            }else if(a.NumberOfEmployees<=10000 && a.NumberOfEmployees>1000){
                a.Size__c='Medium';
            }else{
                a.Size__c='Small';
            }
            account.add(a);
    	}
        update account;
    }
    /* 
     * 7. Create a method that will find all leads that contain 'ca' in their fields. 
     * 	If a lead is located in California(CA), change their Lead Status field to 'Closed - Not 
     * Converted' and their description should display the message, "We are no longer doing 
     * business in California."
     */
    /////////////////////////////////////////////
    //Looks through all records of leads and checks for states that returns CA
    //Once value is verified and correct, it will then change the description and status of the record
    ////////////////////////////////////////////////////////////
    public static void updateCALeads( ) {
    	List<Lead> leads = new List<Lead>();
        for(lead l: [SELECT state, status, description 
                    FROM lead]){
                        if(l.state == 'CA'){
                            l.status = 'Closed - Not Converted';
                            l.description = 'We are no longer doing business in California';
                            leads.add(l);
                        }
       	}
        update leads;
    }
    /*
     * 8. Create a method that will find all Opportunities which have already passed their Close Date 
     * and have a Stage field that is not 'Closed Won'. Since they have passed their Close Date and 
     * they are not marked as 'Closed Won', they should be marked as 'Closed Lost'.
     */
    ////////////////////////////////////////////////////
    //Goes through the list of records in Opportunity
    //takes statename and closedate. the loop will check if stagename is
    //'Closed Won' if not then do the if statement to verify if the closedate has passed
    //If it has been passed then change stagename to 'Closed Lost'
    ///////////////////////////////////////////////////////////
    public static void closePastDueOpportunities( ) {
    	List<Opportunity> opp = new List<Opportunity>();
        date today = system.today();
        for(Opportunity o: [SELECT stagename, closedate 
                            FROM Opportunity
                            WHERE stagename != 'Closed Won']){
                                if(o.closedate < today){
                                    o.stagename = 'Closed Lost';
                                    opp.add(o);
                                }
                            }
        update opp;
    }
}